Metadata-Version: 2.4
Name: ocean
Version: 0.1.0
Summary: OCEAN CLI/TUI multi-agent orchestrator
Author: OCEAN Team
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: typer[all]>=0.9.0
Requires-Dist: rich>=13.7.0
Requires-Dist: fastapi>=0.111.0
Requires-Dist: uvicorn>=0.30.0
Requires-Dist: pytest>=8.2.0
Requires-Dist: httpx>=0.27.0

# 🌊 OCEAN - Multi-Agent Software Engineering Orchestrator

OCEAN (OCEAN Creates Ex And Nihilo) is a **CLI/TUI multi-agent orchestrator** that spins up a software engineering team on demand.

## 🚀 Quick Start

### 1. Setup Environment
```bash
# Create and activate virtual environment
python3 -m venv venv
source venv/bin/activate
pip install -e .
```

### 2. Install Globally (Optional)
```bash
# Create global symlink (requires sudo)
sudo ln -sf "$(pwd)/ocean" /usr/local/bin/ocean
```

### 3. Run OCEAN
```bash
# Start the full interactive experience
ocean

# Or run specific commands:
ocean --help          # Show all commands
ocean clarify         # Project clarification with Moroni
ocean crew            # Meet the OCEAN crew
ocean test            # Run tests
```

## 🎯 What OCEAN Does

OCEAN is a **terminal-based orchestrator** that:

1. **🤖 Clarifies your vision** - Moroni asks questions to understand your project
2. **👥 Assembles your team** - Spins up specialized AI agents (Q, Edna, Mario)
3. **📋 Creates your plan** - Generates project backlog and execution plan
4. **🚀 Scaffolds your project** - Creates initial project structure and files

**No web servers, no APIs, no browsers needed** - everything happens in your terminal!

## 🔧 Available Commands

| Command | Description |
|---------|-------------|
| `ocean` | **Main experience** - Full interactive flow (clarify → crew → plan) |
| `ocean clarify` | Project clarification with Moroni (Architect) |
| `ocean crew` | Meet the OCEAN crew and see their specialties |
| `ocean init` | Generate/refresh project scaffolds |
| `ocean test` | Run the test suite |
| `ocean deploy` | Show deployment plan (dry-run) |

## 🤖 The OCEAN Crew

OCEAN spins up a **Codex-powered software engineering team** with specialized agents:

### **Moroni** — Architect & Brain
- **Role:** Clarifies vision, orchestrates the team, creates project specifications
- **Capabilities:** Project planning, milestone definition, coordination
- **Deliverables:** Project specs, coordination plans, architectural decisions

### **Q** — Backend Engineer
- **Role:** Builds APIs, services, data models, and backend infrastructure
- **Capabilities:** FastAPI development, database design, API integration
- **Deliverables:** Backend services, data models, API endpoints

### **Edna** — Designer & UI/UX Engineer
- **Role:** Creates user interfaces, design systems, and user experience flows
- **Capabilities:** UI design, CSS/HTML, design tokens, user flows
- **Deliverables:** Frontend interfaces, design systems, user experience

### **Mario** — DevOps Engineer
- **Role:** Handles deployment, CI/CD, infrastructure, and cloud platforms
- **Capabilities:** Docker, CI/CD pipelines, cloud deployment, monitoring
- **Deliverables:** Deployment configs, CI workflows, live applications

## 🌟 CLI/TUI Features

### **Rich Terminal Experience**
- **Beautiful tables** - Project summaries, crew info, backlog display
- **Progress indicators** - Visual feedback during operations
- **Color-coded output** - Easy to read and navigate
- **Interactive prompts** - Guided project clarification

### **Session Management**
- **Automatic logging** - Every session saved to timestamped log files
- **Project persistence** - Saves and loads project specifications
- **Audit trail** - Track all agent interactions and decisions

### **Project Scaffolding**
- **Backend templates** - FastAPI, tests, CI workflows
- **Frontend placeholders** - HTML, CSS, design tokens
- **DevOps configs** - Docker, deployment, monitoring
- **Documentation** - Project specs, plans, backlogs

## 🏗️ Project Structure

```
ocean/
├── ocean/              # CLI application (core)
│   ├── cli.py         # Command interface
│   ├── agents.py      # Agent definitions
│   ├── models.py      # Data models
│   └── planner.py     # Task planning
├── docs/              # Documentation & specs
├── logs/              # Session logs
├── backend/           # Generated backend scaffolds
├── ui/                # Generated frontend scaffolds
├── devops/            # Generated deployment configs
├── tests/             # Generated test suites
├── .github/           # Generated CI/CD workflows
├── pyproject.toml     # Package configuration
└── .cursorrules       # Development rules
```

## 🧪 Testing

```bash
# Run all tests
ocean test

# Run specific test suites
pytest tests/
```

## 🚀 Deployment

### Show Deployment Plan
```bash
# Preview deployment steps
ocean deploy --dry-run

# Execute deployment (when implemented)
ocean deploy --no-dry-run
```

## 🔄 Development Workflow

1. **Start OCEAN:** `ocean` (interactive flow)
2. **Clarify vision:** Answer Moroni's questions
3. **Meet the crew:** See your AI team
4. **Get your plan:** Review backlog and tasks
5. **Generate scaffolds:** `ocean init` to create project files
6. **Iterate:** Run `ocean` again to refine

## 🐛 Troubleshooting

### Common Issues

**Command not found:**
```bash
# Ensure virtual environment is activated
source venv/bin/activate
pip install -e .
```

**Tests failing:**
```bash
# Check dependencies
pip install -e .
# Run specific test
pytest tests/ -v
```

**No project spec:**
```bash
# Run clarification first
ocean clarify
```

## 📚 Next Steps

- [ ] Add more agent capabilities
- [ ] Implement task execution
- [ ] Add database persistence
- [ ] Deploy to cloud platform
- [ ] Add authentication and user management

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Run tests: `ocean test`
5. Submit a pull request

## 📄 License

This project is licensed under the MIT License.

---

## 🔄 Recent Transformation

OCEAN has been **transformed from a web application back to its intended purpose**: a powerful CLI/TUI multi-agent orchestrator. 

**What was removed:**
- ❌ Web servers and APIs
- ❌ Browser-based UI
- ❌ Docker containers
- ❌ Complex deployment configs

**What remains:**
- ✅ **Rich CLI/TUI experience** with beautiful tables and progress bars
- ✅ **Multi-agent orchestration** - Moroni, Q, Edna, Mario
- ✅ **Project scaffolding** and planning
- ✅ **Session logging** and persistence
- ✅ **Clean, focused architecture**

OCEAN is now **exactly what it was meant to be**: a terminal-based orchestrator that spins up your AI-powered software engineering team! 🎯 
