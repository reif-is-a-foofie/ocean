Metadata-Version: 2.4
Name: ocean
Version: 0.1.0
Summary: OCEAN CLI/TUI multi-agent orchestrator
Author: OCEAN Team
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: typer[all]>=0.9.0
Requires-Dist: rich>=13.7.0
Requires-Dist: fastapi>=0.111.0
Requires-Dist: uvicorn>=0.30.0
Requires-Dist: pytest>=8.2.0
Requires-Dist: httpx>=0.27.0

# OCEAN PRD (Codex + Cursor Version)

## Name & Expansion

**OCEAN = OCEAN Creates Ex And Nihilo**

---

## Vision

Ocean is a **CLI/TUI multi-agent orchestrator** that spins up a Codex-powered software engineering team on demand.

* You invoke it simply with `ocean`.
* It asks clarifying questions (via Moroni, the architect/brain) until the project vision is understood.
* Then it spins up the predefined crew:

  * **Moroni** ‚Äî Architect/Brain. Clarifies vision, orchestrates.
  * **Q** ‚Äî Backend/tools engineer. Knows APIs, data, services.
  * **Edna** ‚Äî Designer/UI/UX. Produces mockups, CSS, flows.
  * **Mario** ‚Äî DevOps. Knows hosting (Railway, Vercel, Render, etc.), CI/CD, deploys final product.

The crew works together in visible chat logs inside the CLI/TUI.

Ocean inherits the **Codex CLI** for natural language, MCP-based execution, and context management. Cursor consumes this PRD + rules to implement the system.

---

## Guiding Principles

1. **One word, one entrypoint** ‚Äî just `ocean`.
2. **Crew-based orchestration** ‚Äî no abstract PM software; it‚Äôs a ‚Äúteam that codes.‚Äù
3. **Agile deliverables** ‚Äî every milestone produces something the user can actually use/test.
4. **Immutability** ‚Äî logs, repos, and agent conversations are preserved.
5. **Transparency** ‚Äî user can see every conversation between agents.

---

## Core Flow

1. User runs `ocean` (no args).
2. Moroni greets user, asks clarifying questions about what‚Äôs being built (no hardcoded prompts ‚Äî natural Codex context).
3. Once vision is clear enough (e.g., ‚ÄúWeb app,‚Äù ‚ÄúAPI service,‚Äù ‚ÄúCLI‚Äù), Moroni spins up the crew.
4. Q, Edna, and Mario each propose and execute tasks.
5. Deliverables are committed locally in a `repo/` folder.
6. Mario deploys ‚Äî end result is a live, usable instance.

---

## Agent Context

* **Moroni (Architect)**

  * Access: project PRD, user clarifications, repo structure.
  * Role: split project into milestones, assign work to Q, Edna, Mario.
  * Interface: chat-first in Codex CLI.

* **Q (Backend Engineer)**

  * Access: GitHub context, API docs, open-source libraries.
  * Role: build backend services, data models, integrations.
  * Deliverables: code in `backend/`.

* **Edna (Designer)**

  * Access: Figma/HTML/CSS boilerplates, open-source design systems.
  * Role: build UI flows, mockups, frontend styling.
  * Deliverables: `ui/` code, `design.md`.

* **Mario (DevOps)**

  * Access: deployment platforms (Railway, Render, Vercel).
  * Role: provision infra, set up CI/CD, deploy working app.
  * Deliverables: `.github/workflows/`, `Dockerfile`, live URL.

---

## Technical Setup

* **Codex CLI** provides MCP interface for each agent.
* **CrewAI** (or similar orchestration lib) coordinates task assignment, conversation passing, and repo commits.
* **Repo structure** is generated automatically:

  * `/backend`
  * `/ui`
  * `/devops`
  * `/docs`
* **Chat logs** saved into `/logs`.

---

## Milestones (Agile, Deliverables to User Each Step)

### M1 ‚Äî Bootstrapping Ocean

* Implement `ocean` CLI entrypoint (Typer or Click).
* Print welcome banner:

  ```
  üåä Welcome to OCEAN  
  (OCEAN = OCEAN Creates Ex And Nihilo)  
  ```
* Enter Codex chat loop (interactive Q\&A with Moroni).
* **Deliverable:** User runs `ocean` and gets interactive conversation.

### M2 ‚Äî Vision Clarification

* Moroni (via Codex) asks clarifying questions.
* Understands if project is server, app, CLI, etc.
* Stores clarified project spec in `/docs/project.json`.
* **Deliverable:** User exits clarification with a saved project spec.

### M3 ‚Äî Crew Spin-Up

* Instantiate Moroni, Q, Edna, Mario as Codex MCP agents.
* Each agent introduces itself in chat.
* Agents receive project.json context.
* **Deliverable:** Visible crew chat log confirming readiness.

### M4 ‚Äî First Sprint

* Moroni assigns first atomic milestone.
* Q codes backend stub.
* Edna generates UI scaffold.
* Mario sets up CI pipeline.
* **Deliverable:** Repo initialized with working Hello World project scaffold.

### M5 ‚Äî Iteration & Testing

* User can run `ocean test`.
* Crew executes milestone tasks ‚Üí updates repo.
* Codex applies diffs automatically.
* **Deliverable:** Usable prototype in local repo.

### M6 ‚Äî Deployment

* Mario provisions hosting (Railway/Render).
* Deploys app.
* **Deliverable:** Live URL printed in terminal.

---

## Definition of Done

* `ocean` runs as a single command.
* Moroni clarifies vision until project spec is saved.
* Crew (Q, Edna, Mario) executes in visible chat log.
* Repo scaffold created and updated iteratively.
* CI/CD and deployment live.
* Final result: a **user-accessible deployed app**.

---

## CursorRules (Expansion)

This repo is prepared for Cursor to implement OCEAN in small, verifiable steps. See `.cursorrules` for the full, actionable breakdown. Summary below.

### Repository Conventions

- Single entrypoint: `ocean` (no args) runs the conversation (clarify ‚Üí crew intros) and writes a single session log.
- Python 3.11+, Typer for CLI (preferred)
- Repo structure: `backend/`, `ui/`, `devops/`, `docs/`, `logs/`
- Persist logs in `logs/` (append‚Äëonly, timestamped files)
- Ask before network/deploy actions; provide dry‚Äërun mode

### Milestones (Atomic Units)

#### M1 ‚Äî Bootstrap CLI
- Add `pyproject.toml` with console script `ocean` ‚Üí `ocean.cli:entrypoint`.
- Create `ocean/cli.py` and print banner.
- Implement `--help` and `--version`.
- Ensure folders exist: `backend/`, `ui/`, `devops/`, `docs/`, `logs/`.
- Log each run to a single `logs/session-*.log` per invocation.

Tests:
- `tests/test_cli_chat.py::test_entrypoint_runs_help_when_args_present` ensures CLI help works.

Acceptance: run `ocean`; banner prints; log file created.

#### M2 ‚Äî Vision Clarification
- `ocean clarify` prompts for project info (3‚Äì7 Qs).
- Normalize to `docs/project.json` with basic schema.
- Append summary to latest log.

Acceptance: `docs/project.json` exists and contains user answers.

Tests:
- Extend CLI test to verify `docs/project.json` is created when prompts are answered.

#### M3 ‚Äî Crew Spin‚ÄëUp
- Add `ocean/agents.py` with Moroni, Q, Edna, Mario classes.
- `ocean crew` prints `introduce()` lines and logs them.
- Default flow runs crew intros after clarification.

Acceptance: `ocean crew` prints four agent intros and logs them.

Tests:
- Verify agent intros appear in `ocean chat` output and in the session log.

#### M3.5 ‚Äî Initial Plan & Backlog
- Aggregate agent proposals into a backlog.
- Persist `docs/backlog.json` and `docs/plan.md`.
- Run automatically after crew intros in the default flow.

Acceptance: running `ocean` creates `docs/backlog.json` and `docs/plan.md`.

Tests:
- `tests/test_planner.py` ensures backlog and plan files are created and valid.

#### M4 ‚Äî First Sprint Scaffolds
- Backend: `backend/app.py` with FastAPI `/healthz`.
- UI: minimal `ui/index.html` (or Vite+React if desired).
- DevOps: `.github/workflows/ci.yml` running backend tests and simple UI build.
- Docs: `docs/first_sprint.md` with run instructions.
- `ocean init` generates/refreshes scaffolds idempotently.

Acceptance: run `uvicorn backend.app:app --reload`; `GET /healthz` returns `{ "ok": true }`.

Tests:
- `backend/tests/test_healthz.py` exercises the endpoint.
- `ui/styleguide.html` generated from design tokens.

#### M5 ‚Äî Iteration & Testing
- Add `backend/tests/test_healthz.py`.
- `ocean test` runs pytest and logs results.
- `ocean run` starts backend (and optional static UI server).

Acceptance: `ocean test` passes; results logged.

Tests:
- Pytest discovers both `tests/` and `backend/tests/`.

#### M6 ‚Äî Deployment Stubs
- Add `Dockerfile` and `.dockerignore` for backend.
- Add `devops/railway.json` or `devops/render.yaml` (placeholders with TODOs).
- `ocean deploy --dry-run` prints expected steps; no network changes by default.
- `docs/deploy.md` describes manual deploy.

Acceptance: `ocean deploy --dry-run` prints a plan without side effects.

Tests:
- Optional: smoke check that `deploy --dry-run` prints expected steps.

### Agent Interfaces

- Moroni: architect; planning bullets and coordination.
- Q: backend; proposes FastAPI `/healthz` + pytest task.
- Edna: designer; ships minimal UI, baked-in design methodology and tokens; generates `ui/styleguide.html`; optionally uses V0 CLI if present.
- Mario: devops; CI, Dockerfile, Render dry-run plan; optional `docker-compose.yml` and `.env.example` for local dev.

### Quality Bars
- Commands offer `--help` with 1‚Äì3 examples.
- Idempotent behavior; safe re‚Äëruns.
- Clear, concise terminal feedback on changes.
