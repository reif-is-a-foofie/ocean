{
  "docs/architecture.md": "# A Browser Snake Game Built With Vanilla ~~JS~~ Python! — Architecture\n\n## Overview\n- Type: Web application (static UI + API)\n- Backend: FastAPI (Python)\n- Frontend: Static HTML/CSS/JS (optionally Brython for Python-in-browser)\n- Constraints: Minimal dependencies, simple build/run\n- Purpose: Serve a browser-based Snake game with a small backend for health and future features (e.g., scores)\n\n## Goals\n- fastapi backend\n- static UI\n\n## Constraints\n- minimal dependencies\n  - Keep runtime libs to FastAPI + Uvicorn only\n  - No frontend framework; ship plain static assets in `ui/`\n  - Avoid external datastores initially; add optional SQLite later (stdlib `sqlite3`)\n\n## High‑Level Design\n```mermaid\nflowchart TD\n  U[User Browser] -->|HTTP(S)| FE[Static UI (HTML/CSS/JS)]\n  FE -->|XHR/Fetch| API[(FastAPI Backend :8000)]\n  subgraph Client\n    FE\n  end\n  subgraph Server\n    API\n  end\n```\n\n- The UI is served as static files (any static host or `python -m http.server`).\n- The backend exposes lightweight REST endpoints (root, health; future: scores).\n- CORS enabled during development for easy local iteration.\n\n## Components\n- Frontend (ui/)\n  - `ui/index.html`: Game shell, loads script(s) and styles\n  - `ui/styles.css`: Layout and theme\n  - `snake.js` or `snake.py` (with Brython): Game loop, input handling, rendering\n  - No bundler required; vanilla assets only\n\n- Backend (backend/app.py)\n  - FastAPI app with:\n    - GET `/` → Welcome payload\n    - GET `/healthz` → Health probe\n  - CORS middleware enabled for dev\n  - Future: Score submission/retrieval endpoints\n\n## API Surface\n- Stable (v0):\n  - GET `/` → `{ message, type }`\n  - GET `/healthz` → `{ ok: true, status: 'healthy' }`\n\n- Future (planned):\n  - POST `/scores` → submit a score `{ name, points, at }`\n  - GET `/scores/top?limit=10` → leaderboard\n\nExample usage:\n```bash\ncurl http://127.0.0.1:8000/\ncurl http://127.0.0.1:8000/healthz\n```\n\n## Data & Persistence\n- Phase 1: No backend persistence needed for core gameplay\n- Optional Phase 2: Lightweight leaderboard\n  - Use SQLite via Python stdlib `sqlite3` (no new deps)\n  - Single table `scores(id INTEGER PK, name TEXT, points INT, created_at TEXT)`\n\n## Runtime Topology\n- Local development\n  - Static UI on `http://127.0.0.1:5173` (via `python -m http.server`)\n  - API on `http://127.0.0.1:8000` (via `uvicorn`)\n- Containerized deployment\n  - Single container running FastAPI + any static hosting (optional)\n  - Alternatively, host UI via CDN/object storage; API as separate service\n\n## Local Development\n- Backend:\n  - `uvicorn backend.app:app --reload --port 8000`\n- Frontend (static server):\n  - `python -m http.server 5173 --directory ui`\n- Open UI at `http://127.0.0.1:5173` (fetches API from `http://127.0.0.1:8000`)\n\nCORS note: Keep `allow_origins=[\"*\"]` in dev; restrict in prod.\n\n## Build, CI, Deploy\n- CI (GitHub Actions): Lint/type-check (optional), run backend tests, build container\n- Docker:\n  - Base: Python slim\n  - Install only FastAPI + Uvicorn\n  - Copy backend; optionally copy `ui/` if serving from API container\n  - Entrypoint: `uvicorn backend.app:app --host 0.0.0.0 --port 8000`\n- Deployment:\n  - Small container footprint; compatible with most PaaS\n  - If hosting UI separately, configure API URL via environment variable or relative paths behind a reverse proxy\n\n## Security\n- Limit CORS origins in production\n- No secrets required for phase 1\n- Add simple request validation/rate limiting before enabling public score submission\n\n## Observability\n- Health: `/healthz`\n- Logging: Standard Uvicorn/FastAPI logs\n- Future: Basic metrics (process CPU/mem) via container platform; optional request latency logs\n\n## Performance Considerations\n- Frontend avoids heavy frameworks; minimal JS/CSS\n- Backend endpoints are lightweight; no DB by default\n- Serve static assets with cache headers when hosted via CDN or reverse proxy\n\n## Risks & Trade‑offs\n- No persistence means scores reset between runs\n- Adding a DB increases complexity; choose SQLite to stay dependency‑light\n- Separate origins (5173 vs 8000) require CORS during development\n\n## Future Enhancements\n- Leaderboard with SQLite persistence\n- Static hosting with CDN (immutable asset hashes)\n- Service Worker for offline play\n- Input accessibility and touch controls\n- Basic e2e test (Playwright) once UI stabilizes\n"
}